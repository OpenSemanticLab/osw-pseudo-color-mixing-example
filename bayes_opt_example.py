           # Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3
import numpy as np
from ax.service.ax_client import AxClient, ObjectiveProperties
from pydantic.v1 import BaseModel

class RGBValue(BaseModel):
    red: float
    green: float
    blue: float

class ColorOptimizerInput(BaseModel):
    target_color: RGBValue
    iterations: int = 20



def color_rating(measured_rgb:RGBValue, target_rgb) -> float:
    """rates a color based on measured color_mixer_output and ColorOptimizerInput"""
    target_r = target_rgb.red     # Fraunhofer-Green: 0,151,117; Bigmap-Green: 4,92,97
    target_g = target_rgb.green
    target_b = target_rgb.blue

    r = measured_rgb.red
    g = measured_rgb.green
    b = measured_rgb.blue

    max_error = 3*255
    r_error = abs(r-target_r)
    g_error = abs(g-target_g)
    b_error = abs(b-target_b)

    rating = sum([r_error, g_error, b_error])/max_error
    return rating

def optimize_color_mixing(color_optimizer_input: ColorOptimizerInput):
    """
    Optimizes the mixing ratio of food color liquids to achieve a target color.
    Uses Bayesian Optimization via Ax.
    """

    # Initialize Ax Client
    ax_client = AxClient()

    ax_client.create_experiment(
        name = "color_mixing_simulation",
        parameters=[
            {"name": "red_fraction", "type": "range", "bounds": [0.0, 1.0]},
            {"name": "green_fraction", "type": "range", "bounds": [0.0, 1.0]},
            {"name": "blue_fraction", "type": "range", "bounds": [0.0, 1.0]},
        ],
        objectives={
            "rating": ObjectiveProperties(minimize=True),
        },
        parameter_constraints=["red_fraction + green_fraction + blue_fraction <= 1.0"]
    )


    for i in range(19):

        parameterization, trial_index = ax_client.get_next_trial()

        print(f"Trial {i+1}: {parameterization}")

        # extract parameters
        measurement_result = subtractive_color_mixing(ColorMixerInput(
            red_fraction=parameterization["red_fraction"],
            green_fraction=parameterization["green_fraction"],
            blue_fraction=parameterization["blue_fraction"],
        ))
        rating = color_rating(measured_rgb = measurement_result, target_rgb = color_optimizer_input.target_color)
        ax_client.complete_trial(trial_index=trial_index, raw_data={"rating": rating})

    best_parameters, metrics = ax_client.get_best_parameters()

    fig = ax_client.get_contour_plot(param_x="x1", param_y="x2", metric_name="hartmann6")
    return best_parameters, fig


if __name__ == "__main__":
    # Example usage
    target_color = RGBValue(red=0, green=151, blue=117)  # Fraunhofer-Green
    color_optimizer_input = ColorOptimizerInput(target_color=target_color, iterations=20)

    best_mix, fig = optimize_color_mixing(color_optimizer_input)
    print("Best Mixing Ratios:", best_mix)
    print("Red Fraction:", best_mix["red_fraction"])
    print("Green Fraction:", best_mix["green_fraction"])
    print("Blue Fraction:", best_mix["blue_fraction"])

